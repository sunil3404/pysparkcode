+-------+----------+------+
|   name|department|salary|
+-------+----------+------+
|  James|     Sales|  3000|
|Michael|     Sales|  4600|
| Robert|     Sales|  4100|
|  Maria|   Finance|  3000|
|  James|     Sales|  3000|
|  Scott|   Finance|  3300|
|    Jen|   Finance|  3900|
|   Jeff| Marketing|  3000|
|  Kumar| Marketing|  2000|
|   Saif|     Sales|  4100|
+-------+----------+------+

**************************************************
Row Number fucntion is used to give sequential row number starting from 1
to the result of each window partition
**************************************************
+-------+----------+------+----------+
|   name|department|salary|row_number|
+-------+----------+------+----------+
|  James|     Sales|  3000|         1|
|  James|     Sales|  3000|         2|
| Robert|     Sales|  4100|         3|
|   Saif|     Sales|  4100|         4|
|Michael|     Sales|  4600|         5|
|  Maria|   Finance|  3000|         1|
|  Scott|   Finance|  3300|         2|
|    Jen|   Finance|  3900|         3|
|  Kumar| Marketing|  2000|         1|
|   Jeff| Marketing|  3000|         2|
+-------+----------+------+----------+

**************************************************
Rank fucntions used to give rank to the result within a window 
partition. This function leaves gap in rank when there are ties
**************************************************
+-------+----------+------+----+
|   name|department|salary|rank|
+-------+----------+------+----+
|  James|     Sales|  3000|   1|
|  James|     Sales|  3000|   1|
| Robert|     Sales|  4100|   3|
|   Saif|     Sales|  4100|   3|
|Michael|     Sales|  4600|   5|
|  Maria|   Finance|  3000|   1|
|  Scott|   Finance|  3300|   2|
|    Jen|   Finance|  3900|   3|
|  Kumar| Marketing|  2000|   1|
|   Jeff| Marketing|  3000|   2|
+-------+----------+------+----+

**************************************************
Dense Rank function use to get the result with rank of rows
within a window partition without any gaps
**************************************************
+-------+----------+------+----------+
|   name|department|salary|Dense_rank|
+-------+----------+------+----------+
|  James|     Sales|  3000|         1|
|  James|     Sales|  3000|         1|
| Robert|     Sales|  4100|         2|
|   Saif|     Sales|  4100|         2|
|Michael|     Sales|  4600|         3|
|  Maria|   Finance|  3000|         1|
|  Scott|   Finance|  3300|         2|
|    Jen|   Finance|  3900|         3|
|  Kumar| Marketing|  2000|         1|
|   Jeff| Marketing|  3000|         2|
+-------+----------+------+----------+

**************************************************
Percent rank functions gives sequential number in percentage
**************************************************
+-------+----------+------+------------+
|   name|department|salary|percent_rank|
+-------+----------+------+------------+
|  James|     Sales|  3000|         0.0|
|  James|     Sales|  3000|         0.0|
| Robert|     Sales|  4100|         0.5|
|   Saif|     Sales|  4100|         0.5|
|Michael|     Sales|  4600|         1.0|
|  Maria|   Finance|  3000|         0.0|
|  Scott|   Finance|  3300|         0.5|
|    Jen|   Finance|  3900|         1.0|
|  Kumar| Marketing|  2000|         0.0|
|   Jeff| Marketing|  3000|         1.0|
+-------+----------+------+------------+

**************************************************
 ntile function returns the relative rank of result rows within partition. In below we have used 2 as an argument to ntile hence it returns ranking
between 2 values 1 and 2
**************************************************
+-------+----------+------+-----+
|   name|department|salary|ntile|
+-------+----------+------+-----+
|  James|     Sales|  3000|    1|
|  James|     Sales|  3000|    2|
| Robert|     Sales|  4100|    3|
|   Saif|     Sales|  4100|    4|
|Michael|     Sales|  4600|    5|
|  Maria|   Finance|  3000|    1|
|  Scott|   Finance|  3300|    2|
|    Jen|   Finance|  3900|    3|
|  Kumar| Marketing|  2000|    1|
|   Jeff| Marketing|  3000|    2|
+-------+----------+------+-----+

**************************************************
 cume_dist() function is used to get cumulative distribution of values
withing a window partition
**************************************************
+-------+----------+------+------------------+
|   name|department|salary|         cume_dist|
+-------+----------+------+------------------+
|  James|     Sales|  3000|               0.4|
|  James|     Sales|  3000|               0.4|
| Robert|     Sales|  4100|               0.8|
|   Saif|     Sales|  4100|               0.8|
|Michael|     Sales|  4600|               1.0|
|  Maria|   Finance|  3000|0.3333333333333333|
|  Scott|   Finance|  3300|0.6666666666666666|
|    Jen|   Finance|  3900|               1.0|
|  Kumar| Marketing|  2000|               0.5|
|   Jeff| Marketing|  3000|               1.0|
+-------+----------+------+------------------+

**************************************************
lag function
**************************************************
+-------+----------+------+----+
|   name|department|salary| lag|
+-------+----------+------+----+
|  James|     Sales|  3000|null|
|  James|     Sales|  3000|null|
| Robert|     Sales|  4100|3000|
|   Saif|     Sales|  4100|3000|
|Michael|     Sales|  4600|4100|
|  Maria|   Finance|  3000|null|
|  Scott|   Finance|  3300|null|
|    Jen|   Finance|  3900|3000|
|  Kumar| Marketing|  2000|null|
|   Jeff| Marketing|  3000|null|
+-------+----------+------+----+

**************************************************
lead function
**************************************************
+-------+----------+------+----+
|   name|department|salary| lag|
+-------+----------+------+----+
|  James|     Sales|  3000|4100|
|  James|     Sales|  3000|4100|
| Robert|     Sales|  4100|4600|
|   Saif|     Sales|  4100|null|
|Michael|     Sales|  4600|null|
|  Maria|   Finance|  3000|3900|
|  Scott|   Finance|  3300|null|
|    Jen|   Finance|  3900|null|
|  Kumar| Marketing|  2000|null|
|   Jeff| Marketing|  3000|null|
+-------+----------+------+----+

**************************************************
window aggregate function
**************************************************
+----------+------+-----+----+----+
|department|   avg|  sum| min| max|
+----------+------+-----+----+----+
|     Sales|3760.0|18800|3000|4600|
|   Finance|3400.0|10200|3000|3900|
| Marketing|2500.0| 5000|2000|3000|
+----------+------+-----+----+----+

